datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int       @id @default(autoincrement())
  phone      String    @unique
  otp        String?
  otpExpires DateTime?
  profilePic String?
  name       String?
  age        Int?
  email      String?   @unique
  gender     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  glucoseLogs GlucoseLog[]
  weightLogs  WeightLog[]
  Hba1cLogs   Hba1cLog[]
  doctor      Doctor?
  Appointment Appointment[]
  mealLogs    MealLog[]      

}

model GlucoseLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  value     Int // glucose value (mg/dL)
  context   String // fasting, before_breakfast, after_lunch, random etc.
  takenAt   DateTime // when reading was taken
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WeightLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  value     Float // weight in kg
  unit      String   @default("kg") // kg/lbs (default kg)
  takenAt   DateTime // when weight was logged
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hba1cLog {
  id      Int      @id @default(autoincrement())
  userId  Int
  value   Float
  unit    String   @default("%")
  takenAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id           Int      @id @default(autoincrement())
  userId       Int
  doctorId     Int
  date         DateTime
  status       String   @default("pending") // pending, confirmed, cancelled, completed
  paymentId    String?
  amount       Float
  refundStatus String? // requested, refunded, rejected
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  doctor   Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  payments Payment[] // 1 appointment can have multiple payments (or single)
}

model Doctor {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  name        String
  designation String
  hospital    String
  place       String
  phone       String
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  appointments Appointment[]
}

model Payment {
  id                Int      @id @default(autoincrement())
  appointmentId     Int
  razorpayOrderId   String
  razorpayPaymentId String?
  amount            Float
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model MealLog {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  mealType    String    // breakfast, lunch, dinner, snack
  description String?   // user can describe what they ate
  calories    Int?      // optional calorie count
  carbs       Float?    // in grams
  protein     Float?    // in grams
  fat         Float?    // in grams
  loggedAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

